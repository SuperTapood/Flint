// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        (unknown)
// source: common/stack_.proto

package common

import (
	k8s "github.com/SuperTapood/Flint/core/generated/k8s"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StackTypes struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*StackTypes_K8SStack
	Type          isStackTypes_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StackTypes) Reset() {
	*x = StackTypes{}
	mi := &file_common_stack__proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StackTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StackTypes) ProtoMessage() {}

func (x *StackTypes) ProtoReflect() protoreflect.Message {
	mi := &file_common_stack__proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StackTypes.ProtoReflect.Descriptor instead.
func (*StackTypes) Descriptor() ([]byte, []int) {
	return file_common_stack__proto_rawDescGZIP(), []int{0}
}

func (x *StackTypes) GetType() isStackTypes_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *StackTypes) GetK8SStack() *k8s.K8S_Stack_ {
	if x != nil {
		if x, ok := x.Type.(*StackTypes_K8SStack); ok {
			return x.K8SStack
		}
	}
	return nil
}

type isStackTypes_Type interface {
	isStackTypes_Type()
}

type StackTypes_K8SStack struct {
	K8SStack *k8s.K8S_Stack_ `protobuf:"bytes,1,opt,name=k8s_stack,json=k8sStack,proto3,oneof"`
}

func (*StackTypes_K8SStack) isStackTypes_Type() {}

type Stack_ struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Stack         []*StackTypes          `protobuf:"bytes,1,rep,name=stack,proto3" json:"stack,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Stack_) Reset() {
	*x = Stack_{}
	mi := &file_common_stack__proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Stack_) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stack_) ProtoMessage() {}

func (x *Stack_) ProtoReflect() protoreflect.Message {
	mi := &file_common_stack__proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stack_.ProtoReflect.Descriptor instead.
func (*Stack_) Descriptor() ([]byte, []int) {
	return file_common_stack__proto_rawDescGZIP(), []int{1}
}

func (x *Stack_) GetStack() []*StackTypes {
	if x != nil {
		return x.Stack
	}
	return nil
}

var File_common_stack__proto protoreflect.FileDescriptor

const file_common_stack__proto_rawDesc = "" +
	"\n" +
	"\x13common/stack_.proto\x1a\x14k8s/k8s_stack_.proto\"@\n" +
	"\n" +
	"StackTypes\x12*\n" +
	"\tk8s_stack\x18\x01 \x01(\v2\v.K8S_Stack_H\x00R\bk8sStackB\x06\n" +
	"\x04type\"+\n" +
	"\x06Stack_\x12!\n" +
	"\x05stack\x18\x01 \x03(\v2\v.StackTypesR\x05stackBBB\n" +
	"StackProtoP\x01Z2github.com/SuperTapood/Flint/core/generated/commonb\x06proto3"

var (
	file_common_stack__proto_rawDescOnce sync.Once
	file_common_stack__proto_rawDescData []byte
)

func file_common_stack__proto_rawDescGZIP() []byte {
	file_common_stack__proto_rawDescOnce.Do(func() {
		file_common_stack__proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_common_stack__proto_rawDesc), len(file_common_stack__proto_rawDesc)))
	})
	return file_common_stack__proto_rawDescData
}

var file_common_stack__proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_common_stack__proto_goTypes = []any{
	(*StackTypes)(nil),     // 0: StackTypes
	(*Stack_)(nil),         // 1: Stack_
	(*k8s.K8S_Stack_)(nil), // 2: K8S_Stack_
}
var file_common_stack__proto_depIdxs = []int32{
	2, // 0: StackTypes.k8s_stack:type_name -> K8S_Stack_
	0, // 1: Stack_.stack:type_name -> StackTypes
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_common_stack__proto_init() }
func file_common_stack__proto_init() {
	if File_common_stack__proto != nil {
		return
	}
	file_common_stack__proto_msgTypes[0].OneofWrappers = []any{
		(*StackTypes_K8SStack)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_common_stack__proto_rawDesc), len(file_common_stack__proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_common_stack__proto_goTypes,
		DependencyIndexes: file_common_stack__proto_depIdxs,
		MessageInfos:      file_common_stack__proto_msgTypes,
	}.Build()
	File_common_stack__proto = out.File
	file_common_stack__proto_goTypes = nil
	file_common_stack__proto_depIdxs = nil
}
